--// Constants
local Players, UIS, RService, SGui = game:GetService"Players", game:GetService"UserInputService", game:GetService"RunService", game:GetService"StarterGui";
local Client, Mouse, Camera, CF, RNew, Vec3, Vec2 = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Ray.new, Vector3.new, Vector2.new;
local Heartbeat, RStepped, Stepped = RService.Heartbeat, RService.RenderStepped, RService.Stepped
local RVelocity, YVelocity = nil, 0.1
local Character = Client.Character
local RootPart  = Character:FindFirstChild("HumanoidRootPart")

--// Bools / Targets
local LockEnabled = false
local Aimlock, MousePressed = true, false;
local AimlockTarget;
local AntiEnabled = false
local PreviousPosition = nil
local PreviousVelocity = nil

_G.TargetPart = AimPart
local h = true
local d = false
local c = 1
local canSwitch = true

memory = {}

-- // Functions to get target
TargetFunctions = {
	Notify = function(Action, dur)
		if CanNotify then
			game.StarterGui:SetCore("SendNotification", {
				Title = "Angel Barreto Black Anti-Lock",
				Text = Action,
				Duration = dur or 1,
				Logo = "rbxassetid:10318522785",
			})
		end
	end,

	WorldToViewportPoint = function(P)
		return Camera:WorldToViewportPoint(P)
	end,

	WorldToScreenPoint = function(P)
		return Camera.WorldToScreenPoint(Camera, P)
	end,

	GetObscuringObjects = function(T)
		if T and T:FindFirstChild(AimPart) and Client and Client.Character:FindFirstChild("Head") then
			local RayPos = workspace:FindPartOnRay(RNew(
				T[AimPart].Position, Client.Character.Head.Position)
			)
			if RayPos then return RayPos:IsDescendantOf(T) end
		end
	end,

	checkPlayer = function(plr)
		if plr and plr.Character then

			local playerCharacter = plr.Character
			local isKO
			if playerCharacter:FindFirstChild("BodyEffects") then
				isKO = (playerCharacter.BodyEffects["K.O"].Value == false or playerCharacter:FindFirstChild("GRABBING_CONSTRAINT") ~= nil)
			else
				isKO = true
			end
			local NotYou = (playerCharacter.Name ~= Client.Name)
			local foundCrew;
			local dFolder = plr:FindFirstChild("DataFolder")
			local iFolder = dFolder:FindFirstChild("Information")
			local crew = iFolder:FindFirstChild("Crew")

			if dFolder and iFolder and crew and CrewWhitelist then
				if table.find(CrewWhitelist, tonumber(crew.Value)) then
					foundCrew = false
					--TargetFunctions.Notify("User is in whitelisted crew", 0.2)
				else
					foundCrew = true
				end
			else
				foundCrew = true
			end
			return (isKO and NotYou and foundCrew)
		end
		return false
		-- [[Outdated below]] --

		--	local playerCharacter = plr.Character
		--	local isKO = (playerCharacter.BodyEffects["K.O"].Value == false or playerCharacter:FindFirstChild("GRABBING_CONSTRAINT") ~= nil)
		--	local NotYou = (playerCharacter.Name ~= Client.Name)
		--	local foundCrew;
		--	local dFolder = plr:FindFirstChild("DataFolder")
		--	local iFolder = dFolder:FindFirstChild("Information")
		--	local crew = iFolder:FindFirstChild("Crew")
		--	for i,v in pairs(CrewWhitelist) do
		--		if dFolder and iFolder and crew then
		--			foundCrew = (crew.Value ~= tostring(v))
		--		else
		--			foundCrew = true
		--		end
		--	end
		--	return (isKO and NotYou and foundCrew)
		--end
		--return false
	end,

	GetNearestTarget = function()
		-- Credits to whoever made this, i didnt make it, and my own mouse2plr function kinda sucks
		local players = {}
		local PLAYER_HOLD  = {}
		local DISTANCES = {}
		for i, v in pairs(Players:GetPlayers()) do
			if v ~= Client then
				table.insert(players, v)
			end
		end

		for i, v in pairs(players) do
			if v.Character ~= nil then
				local AIM = v.Character:FindFirstChild("Head")
				local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
				local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
				local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
				local DIFF = math.floor((POS - AIM.Position).magnitude)
				PLAYER_HOLD[v.Name .. i] = {}
				PLAYER_HOLD[v.Name .. i].dist= DISTANCE
				PLAYER_HOLD[v.Name .. i].plr = v
				PLAYER_HOLD[v.Name .. i].diff = DIFF
				table.insert(DISTANCES, DIFF)
			end
		end

		if unpack(DISTANCES) == nil then
			return nil
		end

		local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
		if L_DISTANCE > getgenv().AimRadius then
			return nil
		end

		for i, v in pairs(PLAYER_HOLD) do
			if v.diff == L_DISTANCE then
				return v.plr
			end
		end
		return nil
	end,

  --[[
  This is trash and terrible lol
	RandomPart = function()
		if RandomAimParts then
			local func = coroutine.create(function()
				if h then
					wait(rdel)
					h = false
					d = true
					k = false
					j = false
				elseif d then
					wait(rdel)
					h = false
					d = false
					k = true
					j = false
				elseif k then
					wait(rdel)
					h = false
					d = false
					j = true
					k = false
				elseif j then
					wait(rdel)
					h = true
					d = false
					j = false
					k = false
				end
			end)
			coroutine.resume(func) 
			if h then
				_G.TargetPart = "UpperTorso"
			end
			if d then
				_G.TargetPart = "LowerTorso"
			end
			if j then
				_G.TargetPart = "UpperTorso"
			end
			if k then
				_G.TargetPart = "LowerTorso"
			end
		end
	end
]]
	NextPart = function()
		if AutomaticPart then
			for i,v in pairs(_G.AutomaticPartWhitelist) do
				if game.Players.LocalPlayer.Character:FindFirstChild(v) then
					_G.TargetPart = AimPart
					return
				end
			end
		end
		if (c == #_G.PTR) then
			_G.TargetPart = _G.PTR[c]
			c = 1  -- reset loop
		else 
			_G.TargetPart = _G.PTR[c]
			c += 1 -- ADDD
		end
	end,
}

InputFunctions = {

	HandleAimToggle = function()
		if not Hold then
			if LockEnabled then
				LockEnabled = false
				if AimlockTarget ~= nil then AimlockTarget = nil end
				if MousePressed ~= false then MousePressed = false end
			else
				LockEnabled = true
				pcall(function()
					if MousePressed ~= true then MousePressed = true end
					local Target;Target = TargetFunctions.GetNearestTarget()
					if Target ~= nil then
						AimlockTarget = Target
					end
				end)
			end
		elseif Hold then
			pcall(function()
				if MousePressed ~= true then MousePressed = true end
				local Target;Target = TargetFunctions.GetNearestTarget()
				if Target ~= nil then
					AimlockTarget = Target
				end
			end)
		end
	end,

	HandleAntiToggle = function()
	--[[
		if AntiEnabled then
			AntiEnabled = false
			TargetFunctions.Notify("Disabled")
		else
			AntiEnabled = true
			task.spawn(function()
				TargetFunctions.Notify("Enabled")
				while AntiEnabled do
					--// this a dumb check asnilsadsa
					if (not RootPart) then
						TargetFunctions.Notify("Died, waiting for CHARACTER")
						repeat task.wait() RootPart = Character:FindFirstChild("HumanoidRootPart") until RootPart ~= nil
						TargetFunctions.Notify("Found character")
					else
						RVelocity = RootPart.Velocity

						RootPart.Velocity = type(Velocity) == "vector" and Velocity or Velocity(RVelocity)

						RStepped:wait()

						RootPart.Velocity = RVelocity
					end
					Heartbeat:wait()
				end
				TargetFunctions.Notify("BYE BYE FUNCTION")
			end)
		end
		]]
	end,

	InputType = function(input)
		if input.KeyCode == AimKey then
			InputFunctions.HandleAimToggle()
		elseif input.KeyCode == Enum.KeyCode[AimlockToggleKey] then
			Aimlock = not Aimlock
		elseif input.KeyCode == AntiLock then
			InputFunctions.HandleAntiToggle()
		elseif input.KeyCode == BypassKey then
			if AntiBypass then
				AntiBypass = false
			else
				AntiBypass = true
			end
		elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
			if RandomAimParts and canSwitch then
				delay(_G.SwitchDelay, function() canSwitch = true end)
				TargetFunctions.NextPart() -- get newwww part!!!
				canSwitch = false
			end
		end
	end,
}
_G.t = 10
_G.t2 = 100
counter = 0
HeartBeatFunctions = {
	Checks = function()
		if Aimlock == true and MousePressed == true then
			if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(getgenv().AimPart) then
				if TargetFunctions.checkPlayer(AimlockTarget) then
					return true
				end
			end
		end
	end,

	predictionCheck = function(Velocity, sender)
		local NewVelocity
		if YPrediction then
			if mult then
				NewVelocity = (Velocity * PredictionVelocity)
			else
				NewVelocity = (Velocity / PredictionVelocity)
			end
		else
			if mult then
				NewVelocity = Vector3.new(
					Velocity.X * PredictionVelocity,
					Velocity.Y * YSub,
					Velocity.Z * PredictionVelocity
				)
			else
				NewVelocity = Vector3.new(
					Velocity.X / PredictionVelocity,
					Velocity.Y / YSub,
					Velocity.Z / PredictionVelocity
				)
			end
		end

		return NewVelocity
		--if YPrediction and sender ~= "Bypass" then
		--	return Velocity -- return with no change
		--elseif bypassY then
		--	return Velocity
		--else
		--	return Vector3.new(Velocity.X, 0, Velocity.Y) -- return with Y prediction removed
		--end
	end,

	CalculateVelocity = function(Before, After, deltaTime)
		-- // Vars
		local Displacement = (After - Before)
		local Velocity = Displacement / deltaTime
		-- // Return
		return HeartBeatFunctions.predictionCheck(Velocity, "Bypass")
	end,

	lockOn = function(Target, Velocity)
		Camera.CFrame = CF(Camera.CFrame.p, Target.Position + Velocity)
	end,


	shoot = function(Location)

	end,

	mainRun = function(delta)
		if HeartBeatFunctions.Checks() then
			local Aim_Part = AimlockTarget.Character[_G.TargetPart]
			if (not PreviousPosition) then
				PreviousPosition = Aim_Part.Position
				PreviousVelocity = Aim_Part.Velocity
			end


			if DetectAnti and not AntiBypass then
				local a = math.abs(
					math.round(
						(Aim_Part.Velocity).magnitude
					)
				)

				local count = 0
				if #memory < _G.t then
					if (a ~= AimlockTarget.Character.Humanoid.WalkSpeed) and not (a >= 0 and a <= 23)  then ---(a ~= 0) and (a ~= 13) and (a ~= 7) and (a~=22) and (a~= 21) and (a~=20) then
						table.insert(memory, a)
					end
				elseif #memory >= _G.t then
					table.remove(memory, 1)

				end

				for i,v in pairs(memory) do
					if a == v then
						print(a, v, AimlockTarget.Character.Humanoid.WalkSpeed)
						count += 1
					end
				end

				if count >= _G.t then
					AntiBypass = true
				end
				--if (AimlockTarget.Character.Humanoid.FloorMaterial ~= Enum.Material.Air) and (AimlockTarget.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall) and (a) > _G.t then
				--	print(AimlockTarget.Character.Humanoid.FloorMaterial, a, AimlockTarget.Character.Humanoid:GetState())
				--	AntiBypass = true
				--end
			end


			if AntiBypass then
				local Velocity = HeartBeatFunctions.CalculateVelocity(PreviousPosition, Aim_Part.Position, delta)
				HeartBeatFunctions.lockOn(Aim_Part, Velocity)
			else
				local Velocity = HeartBeatFunctions.predictionCheck(Aim_Part.Velocity, "Velocity")
				HeartBeatFunctions.lockOn(Aim_Part, Velocity)
			end
			PreviousPosition = Aim_Part.Position
			PreviousVelocity = Aim_Part.Velocity
		else
			PreviousPosition = nil
			PreviousVelocity = nil
		end
	end,
}

UIS.InputBegan:Connect(function(input, gp)
	if not (UIS:GetFocusedTextBox()) then
		InputFunctions.InputType(input)
	end
end)

UIS.InputEnded:Connect(function(input, gp)
	if not (UIS:GetFocusedTextBox()) then
		if not Hold then return end
		if input.KeyCode == AimKey then
			if AimlockTarget ~= nil then AimlockTarget = nil end
			if MousePressed ~= false then
				MousePressed = false
			end
		end
	end
end)

RService:BindToRenderStep("Aimlock", Enum.RenderPriority.Camera.Value + 1, HeartBeatFunctions.mainRun)

-- previouspostiion
--- Previous position gets again
---- run the calculations

getgenv().isLoaded = true
